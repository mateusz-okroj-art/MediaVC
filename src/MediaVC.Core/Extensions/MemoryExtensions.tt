<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;

namespace MediaVC
{
	public static class MemoryExtensions
	{
<#
			var types = new string[] { "ReadOnlyMemory", "Memory" };

			foreach(var type in types)
			{
#>

		public static IEnumerable<<#= type #><T>> Split<T>(this <#= type #><T> source, int segmentMaxLength)
		{
			if(segmentMaxLength < 1)
                yield break;

            for(var position = 0; position < source.Length; position += segmentMaxLength)
            {
                yield return position + segmentMaxLength >= source.Length ?
                    source[position..] :
                    source.Slice(position, segmentMaxLength);
            }
		}

<#
			}
#>
	}
}